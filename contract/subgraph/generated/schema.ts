// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Border extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Border entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Border must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Border", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Border | null {
    return changetype<Border | null>(
      store.get_in_block("Border", id.toHexString())
    );
  }

  static load(id: Bytes): Border | null {
    return changetype<Border | null>(store.get("Border", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get border_latitudes(): Array<BigInt> {
    let value = this.get("border_latitudes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set border_latitudes(value: Array<BigInt>) {
    this.set("border_latitudes", Value.fromBigIntArray(value));
  }

  get border_longitudes(): Array<BigInt> {
    let value = this.get("border_longitudes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set border_longitudes(value: Array<BigInt>) {
    this.set("border_longitudes", Value.fromBigIntArray(value));
  }

  get border_string(): string {
    let value = this.get("border_string");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set border_string(value: string) {
    this.set("border_string", Value.fromString(value));
  }

  get border_timestamp(): BigInt {
    let value = this.get("border_timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set border_timestamp(value: BigInt) {
    this.set("border_timestamp", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalDistance(): BigInt {
    let value = this.get("totalDistance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDistance(value: BigInt) {
    this.set("totalDistance", Value.fromBigInt(value));
  }

  get lastBorderAvgLat(): i32 {
    let value = this.get("lastBorderAvgLat");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastBorderAvgLat(value: i32) {
    this.set("lastBorderAvgLat", Value.fromI32(value));
  }

  get lastBorderAvgLng(): i32 {
    let value = this.get("lastBorderAvgLng");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastBorderAvgLng(value: i32) {
    this.set("lastBorderAvgLng", Value.fromI32(value));
  }

  get borderHistory(): BorderLoader {
    return new BorderLoader(
      "User",
      this.get("id")!.toString(),
      "borderHistory"
    );
  }
}

export class BorderLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Border[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Border[]>(value);
  }
}
